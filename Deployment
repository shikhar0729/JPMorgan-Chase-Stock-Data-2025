from flask import Flask, request, jsonify
import pickle
import numpy as np
import pandas as pd
from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler

app = Flask(__name__)

# Load Random Forest model
with open("models/random_forest.pkl", "rb") as f:
    rf_model = pickle.load(f)

# Load LSTM model
lstm_model = load_model("models/lstm_model.h5")

# Load scaler
data = pd.read_csv("data/jpm_stock_processed.csv")
scaler = MinMaxScaler()
scaler.fit(data[["Close"]].values)

@app.route("/predict", methods=["POST"])
def predict():
    data = request.get_json()
    features = np.array(data["features"]).reshape(1, -1)
    prediction = rf_model.predict(features)
    return jsonify({"prediction": prediction[0]})

@app.route("/forecast", methods=["POST"])
def forecast():
    data = request.get_json()
    past_60_days = np.array(data["past_60_days"]).reshape(-1, 1)
    past_60_days_scaled = scaler.transform(past_60_days)
    X = past_60_days_scaled.reshape(1, 60, 1)
    prediction = lstm_model.predict(X)
    prediction = scaler.inverse_transform(prediction)
    return jsonify({"prediction": prediction[0][0]})

if __name__ == "__main__":
    app.run(debug=True)
